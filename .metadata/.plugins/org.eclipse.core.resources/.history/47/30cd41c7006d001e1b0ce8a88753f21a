package com.rafaelpino.workshopmongo.Resources;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.rafaelpino.workshopmongo.domain.Post;
import com.rafaelpino.workshopmongo.domain.User;
import com.rafaelpino.workshopmongo.dtos.UserDTO;
import com.rafaelpino.workshopmongo.services.UserService;

@RestController
@RequestMapping(value = "/users")
public class PostResource {

	@Autowired
	private UserService service;
	
	@GetMapping
	public ResponseEntity<List<UserDTO>> findAll(){
		List<User> list = service.findAll();
		List<UserDTO> listDto = list.stream().map(x -> new UserDTO(x)).collect(Collectors.toList()); //agora vai ppegar a lista de usuario e converter para usuario DTO
		return ResponseEntity.ok().body(listDto); //no corpo da minha resposta vai ter essa lista que montei.
	}
	
	@GetMapping(value="/{id}")
 	public ResponseEntity<UserDTO> findById(@PathVariable String id) {
		User obj = service.findById(id);
		return ResponseEntity.ok().body(new UserDTO(obj));
	}
	
	@PostMapping
 	public ResponseEntity<UserDTO> insert(@RequestBody UserDTO objDto) {
		User obj = service.fromDTO(objDto);
		obj = service.insert(obj);
		//eu vou retornar uma resposta vazia mas nela colocar cabeçalho com a url do novo recurso criado pois é uma boa prática
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).build(); //vai retornar uma resposta vazia com o código 201 com a localização do novo recurso criado
	}
	
	@DeleteMapping(value="/{id}")
 	public ResponseEntity<Void> delete(@PathVariable String id) {
		service.delete(id);
		return ResponseEntity.noContent().build(); //resposta que não tem que retornar nada é de código 204 que é o nocontent
	}
	
	@PutMapping(value = "/{id}")
 	public ResponseEntity<Void> update(@RequestBody UserDTO objDto, @PathVariable String id) {
		User obj = service.fromDTO(objDto);//instanciar um obj a partir do objDto que vai vir na requisição
		obj.setId(id); //esse id que veio na requisição é para garantir que meu objeto vai ter o id da requisição
		obj = service.update(obj);
		return ResponseEntity.noContent().build();
	}
	
	@GetMapping(value="/{id}/posts")
 	public ResponseEntity<List<Post>> findPosts(@PathVariable String id) {
		User obj = service.findById(id);
		return ResponseEntity.ok().body(obj.getPosts());//retornar a lista de posts associada ao usuário, funciona por ter associação do usuario com os posts associando eles a ser por referencia, tardia por ser lazy.
	}
}
